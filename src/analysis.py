# -*- coding: utf-8 -*-
"""Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TkvuGY_bVzswY78cWOhIAJzLVPtkN0qJ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go


def add_zscores(data):
    cols = list(data.columns)
    removals = ['Name', 'Team', 'Taken']
    for col in cols:
        if col not in removals:
            col_zscore = col + '_zscore'
            data[col_zscore] = (data[col] - data[col].mean())/data[col].std(ddof=0)
    total = 0
    for col in ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FG%', 'FT%', 'TOV']:
        col_zscore = col + '_zscore'
        if col == 'TOV':
            total -= data[col_zscore]
        else:
            total += data[col_zscore]
    data['SUM_zscore'] = total



"""9-Categories
points
rebounds
assists
steals
blocks
threes
field-goal percentage
free-throw percentage
turnovers
['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FG%', 'FT%', 'TOV']
"""


# ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FG%', 'FT%', 'TOV']
def calculate_projected_score(stats, team):
    data = stats[stats.Name.isin(team.players)]
    res = {}
    for col in ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'TOV']:
        res[col] = data[col].sum()

    fta_sum = data['FTA'].sum()
    if fta_sum > 0.0:
        res['FT%'] = data['FTM'].sum() / fta_sum
    else:
        res['FT%'] = 0.0

    fga_sum = data['FGA'].sum()
    if fga_sum > 0.0:
        res['FG%'] = data['FGM'].sum() / fga_sum
    else:
        res['FG%'] = 0.0


    res_df = pd.DataFrame(res, index=[team.owner])
    return res_df


def calc_projected_score_percentile(stats, teams, showfig=True, color='team'):
    frames = []
    for team in teams:
        temp = calculate_projected_score(stats, team)
        frames.append(temp)
    res = pd.concat(frames)

    for team in teams:
        data = stats[stats.Name.isin(team.players)]
        for col in ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'TOV']:
            if len(team.players) > 0:
                res.loc[team.owner][col] = res.loc[team.owner][col] / len(team.players)
            else:
                res.loc[team.owner][col] = 0

        if data['FTA'].sum() > 0.0:
            res.loc[team.owner]['FT%'] = data['FTM'].sum() / data['FTA'].sum()
        else:
            res.loc[team.owner]['FT%'] = 0.0
        if data['FGA'].sum() > 0.0:
            res.loc[team.owner]['FG%'] = data['FGM'].sum() / data['FGA'].sum()
        else:
            res.loc[team.owner]['FG%'] = 0.0

    if color != 'simulation':
        res.loc['75th Percentile (Teams)'] = res.quantile(0.75)
        res.loc['60th Percentile (Players)'] = [15.2, 5.5, 3.2, 1.0, 0.6, 1.64, 1.4, 0.8038, 0.4724]
    res = res.round(3)

    if color == 'players':
        font_colors = [['black' for _ in range(len(res) + 1)] for _ in range(len(res.columns) + 1)]
        for i, (index, row) in enumerate(res.iterrows()):
            for j, (idx, val) in enumerate(zip(row.index, row), 1):
                if i == len(res) - 2:
                    continue
                if val > res.loc['60th Percentile (Players)'][idx]:
                    font_colors[j][i] = 'green'
                elif val < res.loc['60th Percentile (Players)'][idx]:
                    font_colors[j][i] = 'red'
    elif color == 'simulation':
        font_colors = [['black' for _ in range(len(res) + 1)] for _ in range(len(res.columns) + 1)]
        for i, (index, row) in enumerate(res.iterrows()):
            for j, (idx, val) in enumerate(zip(row.index, row), 1):
                if val > res.loc['Trent'][idx].item():
                    font_colors[j][i] = 'green'
                elif val < res.loc['Trent'][idx].item():
                    font_colors[j][i] = 'red'
    else:
        font_colors = [['black' for _ in range(len(res) + 1)] for _ in range(len(res.columns) + 1)]
        for i, (index, row) in enumerate(res.iterrows()):
            for j, (idx, val) in enumerate(zip(row.index, row), 1):
                if i == len(res) - 1:
                    continue
                if val > res.loc['75th Percentile (Teams)'][idx]:
                    font_colors[j][i] = 'green'
                elif val < res.loc['75th Percentile (Teams)'][idx]:
                    font_colors[j][i] = 'red'

    fig = go.Figure(data=[go.Table(
        header=dict(values=['Name'] + list(res.columns),
                    align='left'),
        cells=dict(
            values=[res.index, res['PTS'], res['REB'], res['AST'], res['STL'], res['BLK'], res['3PM'], res['TOV'],
                    res['FT%'], res['FG%']],
            fill_color='lavender', align='left', font_color=font_colors))

    ])
    if showfig:
        fig.show()

    return res


def calc_projected_score_all(stats, teams, showfig=True, compute_average=True):
    frames = []
    for team in teams:
        temp = calculate_projected_score(stats, team)
        frames.append(temp)
    res = pd.concat(frames)

    if compute_average:
        res.loc['Average'] = res.mean()

        res = res.round(3)

        font_colors = [['black' for _ in range(13 + 1)] for _ in range(11)]
        for i, (index, row) in enumerate(res.iterrows()):
            for j, (idx, val) in enumerate(zip(row.index, row), 1):
                if val > res.loc['Average'][idx]:
                    font_colors[j][i] = 'green'
                elif val < res.loc['Average'][idx]:
                    font_colors[j][i] = 'red'
                else:
                    font_colors[j][i] = 'black'
    else:
        font_colors = None
        res = res.round(3)
    fig = go.Figure(data=[go.Table(
        header=dict(values=['Name'] + list(res.columns),
                    align='left'),
        cells=dict(
            values=[res.index, res['PTS'], res['REB'], res['AST'], res['STL'], res['BLK'], res['3PM'], res['TOV'],
                    res['FT%'], res['FG%']],
            fill_color='lavender', align='left', font_color=font_colors))

    ])
    if showfig:
        fig.show()

    return res


# DON'T USE WITH TOV
def top_players_cat(data, categories=['PTS', 'AST', '3PM'], num_players=20):
    temp = data[data.Taken == False]
    res = temp.groupby('Name').sum()[categories]
    res['CAT_AVG'] = res.mean(axis=1)
    res.sort_values(by=['CAT_AVG'], ascending=False, inplace=True)
    return res[:num_players]


def top_players_zscore(data, categories=['PTS', 'AST', '3PM'], weights=[0.6, 0.3, 0.1], num_players=20):
    if sum(weights) != 1:
      print(sum(weights))
      print('Weights do not sum to 1.')

    temp = data[data.Taken == False]
    cats = [c + '_zscore' for c in categories]
    res = temp.groupby('Name').sum()[cats]
    res['WEIGHTED_Z_AVG'] = 0

    for cat, weight in zip(cats, weights):
      res['WEIGHTED_Z_AVG'] += res[cat] * weight
    res['WEIGHTED_Z_AVG'] = res['WEIGHTED_Z_AVG'] / len(categories)
    res.sort_values(by=['WEIGHTED_Z_AVG'], ascending=False, inplace=True)
    return res[:num_players]


def simulate_top_picks(data, team, categories=['PTS', 'AST', '3PM'], weights=[0.6, 0.3, 0.1], num_players=10):
    temp_data = data.copy()
    team_copy = team.data_to_json()

    topPicks = top_players_zscore(temp_data, categories, weights, num_players)
    players = topPicks.index
    newTeams = {}

    for player in players:
        team_copy["owner"] = player
        test_team, disregard = generate_teams(temp_data, [team_copy], True)
        test_team[player].add_player(player, temp_data)
        newTeams['With ' + player] = test_team[player]

    all_teams = [team] + list(newTeams.values())
    calc_projected_score_percentile(temp_data, all_teams, showfig=True, color='simulation')


def graph_cats(data):
    cols = ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FG%', 'FT%', 'TOV']
    sixty_percentile = [15.2, 5.5, 3.2, 1.0, 0.6, 1.64, 0.4724, 0.8038, 1.8]
    for col, line_pos in zip(cols, sixty_percentile):
        # col_zscore = col + '_zscore'

        fig = px.scatter(data, x='Name', y=col, title=col)
        fig.add_shape(type="line",
                      x0=0, y0=line_pos, x1=len(data), y1=line_pos,
                      line=dict(color="RoyalBlue", width=3)
                      )
        fig.show()


def graph_cats(data):
    cols = ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FG%', 'FT%', 'TOV']
    sixty_percentile = [15.2, 5.5, 3.2, 1.0, 0.6, 1.64, 0.4724, 0.8038, 1.8]
    for col, line_pos in zip(cols, sixty_percentile):
        col_zscore = col + '_zscore'
        fig = px.scatter(data, x='Name', y=col, title=col)
        fig.show()


def show_table(stats):
    stats.describe()


#x='PTS', y='AST', z='3PM'
def show_3D_scatter(stats, col1, col2, col3):
    fig = px.scatter_3d(stats[(stats.MPG > 30) & (stats.Gs > 30) & (stats.Taken == False)],
                        x=col1,
                        y=col2, z=col3, color='Name')
    fig.show()




def gen_fake_team(num):
    owner_name = "Team " + str(num)
    return {"owner": owner_name, "players": []}