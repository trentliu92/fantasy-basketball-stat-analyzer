# -*- coding: utf-8 -*-
"""Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TkvuGY_bVzswY78cWOhIAJzLVPtkN0qJ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from os import system
import json
import csv
import copy


# db definitions

# historical 2019-2020 season data
def read_19_20():
    stats_19_20 = pd.read_csv('./data/online_19_20_stats.csv')
    stats_19_20.drop('Rank', axis=1, inplace=True)
    stats_19_20['Taken'] = False
    return stats_19_20


# projected data scraped from ESPN
def read_projected():
    stats_projected = pd.read_csv('./data/projected_player_data.csv')
    stats_projected['Taken'] = False
    return stats_projected


def read_database():
    stats_db = pd.read_csv('./database/projected_data.csv')
    return stats_db


def read_team():
    with open("./database/teams_data.json") as f:
        team_data = json.loads(f.read())
        f.close()
        return team_data


def add_zscores(data):
    cols = list(data.columns)
    removals = ['Name', 'Team', 'Taken']
    for col in cols:
        if col not in removals:
            col_zscore = col + '_zscore'
            data[col_zscore] = (data[col] - data[col].mean())/data[col].std(ddof=0)
    total = 0
    for col in ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FG%', 'FT%', 'TOV']:
        col_zscore = col + '_zscore'
        if col == 'TOV':
            total -= data[col_zscore]
        else:
            total += data[col_zscore]
    data['SUM_zscore'] = total


# ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FG%', 'FT%', 'TOV']
class Team:

    def __init__(self, owner):
        self.owner = owner
        self.players = []

    def add_player(self, player, df, force=False):
        if len(self.players) > 13:
            print('Too many players.')
        elif df is None:
            print('No data frame was passed')
        elif not force and (not df.Name.isin([player]).any() or df.loc[df.Name.isin([player]), 'Taken'].item() == True):
            print(player + ' is not available.')
        else:
            self.players.append(player.strip())
            df.loc[df.Name.isin([player]), 'Taken'] = True
        return df

    def remove_player(self, player, df):
        self.players.remove(player.strip())
        df.loc[df.Name.isin([player]), 'Taken'] = False
        return df

    def calculate_projected_score(self, stats):
        data = stats[stats.Name.isin(self.players)]
        res = {}
        for col in ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'TOV']:
            res[col] = data[col].sum()
        res['FT%'] = data['FTM'].sum() / data['FTA'].sum()
        res['FG%'] = data['FGM'].sum() / data['FGA'].sum()
        res_df = pd.DataFrame(res, index=[self.owner])
        return res_df

    def show_roster(self):
        print(self.players)

    def data_to_json(self):
        return {"owner": self.owner, "players": self.players}


"""9-Categories
points
rebounds
assists
steals
blocks
threes
field-goal percentage
free-throw percentage
turnovers
['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FG%', 'FT%', 'TOV']
"""


# ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FG%', 'FT%', 'TOV']
def calculate_projected_score(stats, team):
    data = stats[stats.Name.isin(team.players)]
    res = {}
    for col in ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'TOV']:
        res[col] = data[col].sum()

    fta_sum = data['FTA'].sum()
    if fta_sum > 0.0:
        res['FT%'] = data['FTM'].sum() / fta_sum
    else:
        res['FT%'] = 0.0

    fga_sum = data['FGA'].sum()
    if fga_sum > 0.0:
        res['FG%'] = data['FGM'].sum() / fga_sum
    else:
        res['FG%'] = 0.0


    res_df = pd.DataFrame(res, index=[team.owner])
    return res_df


def calc_projected_score_percentile(stats, teams, showfig=True, color='team'):
    frames = []
    for team in teams:
        temp = calculate_projected_score(stats, team)
        frames.append(temp)
    res = pd.concat(frames)

    for team in teams:
        data = stats[stats.Name.isin(team.players)]
        for col in ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'TOV']:
            if len(team.players) > 0:
                res.loc[team.owner][col] = res.loc[team.owner][col] / len(team.players)
            else:
                res.loc[team.owner][col] = 0

        if data['FTA'].sum() > 0.0:
            res.loc[team.owner]['FT%'] = data['FTM'].sum() / data['FTA'].sum()
        else:
            res.loc[team.owner]['FT%'] = 0.0
        if data['FGA'].sum() > 0.0:
            res.loc[team.owner]['FG%'] = data['FGM'].sum() / data['FGA'].sum()
        else:
            res.loc[team.owner]['FG%'] = 0.0

    if color != 'simulation':
        res.loc['75th Percentile (Teams)'] = res.quantile(0.75)
        res.loc['60th Percentile (Players)'] = [15.2, 5.5, 3.2, 1.0, 0.6, 1.64, 1.4, 0.8038, 0.4724]
    res = res.round(3)

    if color == 'players':
        font_colors = [['black' for _ in range(len(res) + 1)] for _ in range(len(res.columns) + 1)]
        for i, (index, row) in enumerate(res.iterrows()):
            for j, (idx, val) in enumerate(zip(row.index, row), 1):
                if i == len(res) - 2:
                    continue
                if val > res.loc['60th Percentile (Players)'][idx]:
                    font_colors[j][i] = 'green'
                elif val < res.loc['60th Percentile (Players)'][idx]:
                    font_colors[j][i] = 'red'
    elif color == 'simulation':
        font_colors = [['black' for _ in range(len(res) + 1)] for _ in range(len(res.columns) + 1)]
        for i, (index, row) in enumerate(res.iterrows()):
            for j, (idx, val) in enumerate(zip(row.index, row), 1):
                if val > res.loc['Trent'][idx].item():
                    font_colors[j][i] = 'green'
                elif val < res.loc['Trent'][idx].item():
                    font_colors[j][i] = 'red'
    else:
        font_colors = [['black' for _ in range(len(res) + 1)] for _ in range(len(res.columns) + 1)]
        for i, (index, row) in enumerate(res.iterrows()):
            for j, (idx, val) in enumerate(zip(row.index, row), 1):
                if i == len(res) - 1:
                    continue
                if val > res.loc['75th Percentile (Teams)'][idx]:
                    font_colors[j][i] = 'green'
                elif val < res.loc['75th Percentile (Teams)'][idx]:
                    font_colors[j][i] = 'red'

    fig = go.Figure(data=[go.Table(
        header=dict(values=['Name'] + list(res.columns),
                    align='left'),
        cells=dict(
            values=[res.index, res['PTS'], res['REB'], res['AST'], res['STL'], res['BLK'], res['3PM'], res['TOV'],
                    res['FT%'], res['FG%']],
            fill_color='lavender', align='left', font_color=font_colors))

    ])
    if showfig:
        fig.show()

    return res


def calc_projected_score_all(stats, teams, showfig=True, compute_average=True):
    frames = []
    for team in teams:
        temp = calculate_projected_score(stats, team)
        frames.append(temp)
    res = pd.concat(frames)

    if compute_average:
        res.loc['Average'] = res.mean()

        res = res.round(3)

        font_colors = [['black' for _ in range(13 + 1)] for _ in range(11)]
        for i, (index, row) in enumerate(res.iterrows()):
            for j, (idx, val) in enumerate(zip(row.index, row), 1):
                if val > res.loc['Average'][idx]:
                    font_colors[j][i] = 'green'
                elif val < res.loc['Average'][idx]:
                    font_colors[j][i] = 'red'
                else:
                    font_colors[j][i] = 'black'
    else:
        font_colors = None
        res = res.round(3)
    fig = go.Figure(data=[go.Table(
        header=dict(values=['Name'] + list(res.columns),
                    align='left'),
        cells=dict(
            values=[res.index, res['PTS'], res['REB'], res['AST'], res['STL'], res['BLK'], res['3PM'], res['TOV'],
                    res['FT%'], res['FG%']],
            fill_color='lavender', align='left', font_color=font_colors))

    ])
    if showfig:
        fig.show()

    return res


# DON'T USE WITH TOV
def top_players_cat(data, categories=['PTS', 'AST', '3PM'], num_players=20):
    temp = data[data.Taken == False]
    res = temp.groupby('Name').sum()[categories]
    res['CAT_AVG'] = res.mean(axis=1)
    res.sort_values(by=['CAT_AVG'], ascending=False, inplace=True)
    return res[:num_players]


def top_players_zscore(data, categories=['PTS', 'AST', '3PM'], weights=[0.6, 0.3, 0.1], num_players=20):
    if sum(weights) != 1:
      print(sum(weights))
      print('Weights do not sum to 1.')

    temp = data[data.Taken == False]
    cats = [c + '_zscore' for c in categories]
    res = temp.groupby('Name').sum()[cats]
    res['WEIGHTED_Z_AVG'] = 0

    for cat, weight in zip(cats, weights):
      res['WEIGHTED_Z_AVG'] += res[cat] * weight
    res['WEIGHTED_Z_AVG'] = res['WEIGHTED_Z_AVG'] / len(categories)
    res.sort_values(by=['WEIGHTED_Z_AVG'], ascending=False, inplace=True)
    return res[:num_players]


def simulate_top_picks(data, team, categories=['PTS', 'AST', '3PM'], weights=[0.6, 0.3, 0.1], num_players=10):
    temp_data = data.copy()
    team_copy = team.data_to_json()

    topPicks = top_players_zscore(temp_data, categories, weights, num_players)
    players = topPicks.index
    newTeams = {}

    for player in players:
        team_copy["owner"] = player
        test_team, disregard = generate_teams(temp_data, [team_copy], True)
        test_team[player].add_player(player, temp_data)
        newTeams['With ' + player] = test_team[player]

    all_teams = [team] + list(newTeams.values())
    calc_projected_score_percentile(temp_data, all_teams, showfig=True, color='simulation')


def graph_cats(data):
    cols = ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FG%', 'FT%', 'TOV']
    sixty_percentile = [15.2, 5.5, 3.2, 1.0, 0.6, 1.64, 0.4724, 0.8038, 1.8]
    for col, line_pos in zip(cols, sixty_percentile):
        # col_zscore = col + '_zscore'

        fig = px.scatter(data, x='Name', y=col, title=col)
        fig.add_shape(type="line",
                      x0=0, y0=line_pos, x1=len(data), y1=line_pos,
                      line=dict(color="RoyalBlue", width=3)
                      )
        fig.show()


def graph_cats(data):
    cols = ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FG%', 'FT%', 'TOV']
    sixty_percentile = [15.2, 5.5, 3.2, 1.0, 0.6, 1.64, 0.4724, 0.8038, 1.8]
    for col, line_pos in zip(cols, sixty_percentile):
        col_zscore = col + '_zscore'
        fig = px.scatter(data, x='Name', y=col, title=col)
        fig.show()


def show_table(stats):
    stats.describe()


#x='PTS', y='AST', z='3PM'
def show_3D_scatter(stats, col1, col2, col3):
    fig = px.scatter_3d(stats[(stats.MPG > 30) & (stats.Gs > 30) & (stats.Taken == False)],
                        x=col1,
                        y=col2, z=col3, color='Name')
    fig.show()


def generate_teams(stats, teams_data, force=False):
    temp_stats = stats.copy()
    teams = {}

    for item in teams_data:
        temp = Team(owner=item["owner"])

        for player in item["players"]:
            temp_stats = temp.add_player(player, temp_stats, force)
        teams[item["owner"]] = temp

    return teams, temp_stats


def add_player(team_name, teams, player, df):
    new_df = teams[team_name].add_player(player, df)
    new_df.to_csv("./database/projected_data.csv", index=False)

    teams_json = []
    for team in teams.keys():
        teams_json.append(teams[team].data_to_json())

    f = open("./database/teams_data.json", "w")
    f.write(json.dumps(teams_json))
    f.close()


def reset_database():
    stats_projected = read_projected()
    add_zscores(stats_projected)
    projected_copy = stats_projected.copy()

    # read team data
    with open("./data/teams_data.json") as f:
        team_data = json.loads(f.read())
        f.close()

    teams, projected_copy = generate_teams(projected_copy, team_data)

    teams_json = []
    for team in teams.keys():
        teams_json.append(teams[team].data_to_json())

    f = open("./database/teams_data.json", "w")
    f.write(json.dumps(teams_json))
    f.close()

    projected_copy.to_csv("./database/projected_data.csv", index=False)


def gen_fake_team(num):
    owner_name = "Team " + str(num)
    return {"owner": owner_name, "players": []}


def test_db(index):
    stats_projected = read_projected()
    add_zscores(stats_projected)
    projected_copy = stats_projected.copy()

    fake_team_data = []

    for x in range(1, 13):
        if x == index:
            fake_team_data.append({"owner": "Trent", "players": []})
        else:
            fake_team_data.append(gen_fake_team(x))

    teams, projected_copy = generate_teams(projected_copy, fake_team_data)

    teams_json = []
    for team in teams.keys():
        teams_json.append(teams[team].data_to_json())

    f = open("./database/teams_data.json", "w")
    f.write(json.dumps(teams_json))
    f.close()

    projected_copy.to_csv("./database/projected_data.csv", index=False)


def clear():
    lambda: os.system('clear')


def driver():
    clear()
    # read from csv

    # RESET
    # reset_database()

    # MOCK
    # test_db(3)
    # stats_projected = read_database()

    # MAIN RUN
    step = 0
    while step != 4:
        stats_projected = read_projected()
        add_zscores(stats_projected)

        teams_data = read_team()
        teams_dict, stats_projected = generate_teams(stats_projected, teams_data)

        team_list = []
        choice_dict = {}

        for i, team in enumerate(teams_dict.keys()):
            choice_dict[str(i + 1)] = team
            team_list.append(teams_dict[team])

        if step == 0:
            print("1. Print Suggestions")
            print("2. Add Players")
            step = int(input())

        if step == 1:
            clear()
            selection = {
                "points": {
                    "categories": ['PTS', 'AST', '3PM', 'STL'],
                    "weights": [0.4, 0.25, 0.2, .15]
                },
                "assists": {
                    "categories": ['AST', 'PTS', '3PM', 'STL'],
                    "weights": [0.4, 0.25, 0.2, .15]
                },
                "rebounds": {
                    "categories": ['REB', 'BLK', 'FG%', 'PTS'],
                    "weights": [0.4, 0.25, 0.2, .15]
                },
                "threes": {
                    "categories": ['3PM', 'PTS', 'STL', 'AST'],
                    "weights": [0.4, 0.25, 0.2, .15]
                },
                "blocks": {
                    "categories": ['BLK', 'REB', 'FG%', 'PTS'],
                    "weights": [0.4, 0.25, 0.2, .15]
                },
                "steals": {
                    "categories": ['STL', 'PTS', 'AST', '3PM'],
                    "weights": [0.4, 0.25, 0.2, .15]
                },
                "FGP": {
                    "categories": ['FGP', 'REB', 'BLK', 'PTS'],
                    "weights": [0.4, 0.25, 0.2, .15]
                },
                "FTP": {
                    "categories": ['FTP', 'PTS', 'AST', 'STL'],
                    "weights": [0.4, 0.25, 0.2, .15]
                },
                "DEF": {
                    "categories": ['BLK', 'STL', 'PTS'],
                    "weights": [0.4, 0.4, 0.2]
                }
            }

            for key in selection.keys():
                print(key)

            print("Select stat: ")
            sel_key = input()

            if len(teams_dict["Trent"].players) > 0:
                top_players_zscore(stats_projected, categories=['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FT%', 'FG%'],
                                   weights=[.125 for i in range(8)], num_players=20)

                _ = calc_projected_score_percentile(stats_projected, team_list, showfig=True, color='team')
                simulate_top_picks(stats_projected, teams_dict["Trent"], categories=selection[sel_key]["categories"],
                                   weights=selection[sel_key]["weights"],
                                   num_players=10)
                step = 2
            else:
                print("Trent does not have enough players")
                step = 0

        if step == 2:
            for i, team in enumerate(teams_dict.keys()):
                print(str(i + 1) + ": " + team)

            # get team
            clear()
            print("Home")
            print("Exit")
            print("")
            print("Type index to get team:")

            team_choice = input()

            if team_choice == "Home" or team_choice == "home":
                step = 0
            elif team_choice == "Exit" or team_choice == "exit":
                step = 4
            else:
                int_choice = int(team_choice)
                pos = int(int_choice / 12)

                if pos % 2 == 1:
                    new_key = str(12 - (int_choice % 12) + 1)
                else:
                    new_key = str((int_choice % 12))

                team_key = choice_dict[new_key]
                # get player
                clear()
                print(team_key)
                print("Enter player name: ")
                player_name = input()
                player_name = player_name.strip()
                print(player_name)
                # add player
                add_player(team_key, teams_dict, player_name, stats_projected)


        clear()
        # print("continue?")
        # cont = input()
        #
        # if cont == "no":
        #     clear()
        #     step = 4
        #
        # clear()

driver()
