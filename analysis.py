# -*- coding: utf-8 -*-
"""Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TkvuGY_bVzswY78cWOhIAJzLVPtkN0qJ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
import os
import csv


# constants and file definitions

# historical 2019-2020 season data
stats_19_20 = pd.read_csv('./data/online_19_20_stats.csv')
stats_19_20.drop('Rank', axis=1, inplace=True)
stats_19_20['Taken'] = False

# projected data scraped from ESPN
stats_projected = pd.read_csv('./data/projected_player_data.csv')
stats_projected['Taken'] = False


def add_zscores(data):
    cols = list(data.columns)
    removals = ['Name', 'Team', 'Taken']
    for col in cols:
        if col not in removals:
            col_zscore = col + '_zscore'
            data[col_zscore] = (data[col] - data[col].mean()) / data[col].std(ddof=0)
    total = 0
    for col in ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FG%', 'FT%', 'TOV']:
        col_zscore = col + '_zscore'
        if col == 'TOV':
            total -= data[col_zscore]
        else:
            total += data[col_zscore]
    data['SUM_zscore'] = total


# ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FG%', 'FT%', 'TOV']
class Team:

    def __init__(self, owner, df, players=[]):
        self.owner = owner
        if not players:
            self.players = []
        else:
            self.players = players
        self.df = df
        if players:
            df.loc[df.Name.isin(players), 'Taken'] = True

    def add_player(self, player, df=None):
        if df is None:
            df = self.df
        if not df.Name.isin([player]).any() or df.loc[df.Name.isin([player]), 'Taken'].item() == True:
            print('Player not available.')
            return
        self.players.append(player.strip())
        df.loc[df.Name.isin([player]), 'Taken'] = True
        if len(self.players) > 13:
            print('Too many players.')

    def remove_player(self, player, df=None):
        if df is None:
            df = self.df
        self.players.remove(player.strip())
        df.loc[df.Name.isin([player]), 'Taken'] = False

    def calculate_projected_score(self, stats):
        data = stats[stats.Name.isin(self.players)]
        res = {}
        for col in ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'TOV']:
            res[col] = data[col].sum()
        res['FT%'] = data['FTM'].sum() / data['FTA'].sum()
        res['FG%'] = data['FGM'].sum() / data['FGA'].sum()
        res_df = pd.DataFrame(res, index=[self.owner])
        return res_df

    def show_roster(self):
        print(self.players)


"""9-Categories
points
rebounds
assists
steals
blocks
threes
field-goal percentage
free-throw percentage
turnovers
['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FG%', 'FT%', 'TOV']
"""


# ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FG%', 'FT%', 'TOV']
def calculate_projected_score(stats, team):
    data = stats[stats.Name.isin(team.players)]
    res = {}
    for col in ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'TOV']:
        res[col] = data[col].sum()
    res['FT%'] = data['FTM'].sum() / data['FTA'].sum()
    res['FG%'] = data['FGM'].sum() / data['FGA'].sum()
    res_df = pd.DataFrame(res, index=[team.owner])
    return res_df


def calc_projected_score_all(stats, teams, showfig=True):
    frames = []
    for team in teams:
        temp = calculate_projected_score(stats, team)
        frames.append(temp)
    res = pd.concat(frames)
    res.loc['Average'] = res.mean()

    res = res.round(3)

    font_colors = [['black' for _ in range(13 + 1)] for _ in range(11)]
    for i, (index, row) in enumerate(df.iterrows()):
        for j, (idx, val) in enumerate(zip(row.index, row), 1):
            if val > df.loc['Average'][idx]:
                font_colors[j][i] = 'green'
            elif val < df.loc['Average'][idx]:
                font_colors[j][i] = 'red'
            else:
                font_colors[j][i] = 'black'

    fig = go.Figure(data=[go.Table(
        header=dict(values=['Name'] + list(res.columns),
                    align='left'),
        cells=dict(
            values=[res.index, res['PTS'], res['REB'], res['AST'], res['STL'], res['BLK'], res['3PM'], res['TOV'],
                    res['FT%'], res['FG%']],
            fill_color='lavender', align='left', font_color=font_colors))

    ])
    if showfig:
        fig.show()

    return res.round(3)


# DON'T USE WITH TOV
def top_players_cat(data, categories=['PTS', 'AST', '3PM'], num_players=20):
    temp = data[data.Taken == False]
    res = temp.groupby('Name').sum()[categories]
    res['CAT_AVG'] = res.mean(axis=1)
    res.sort_values(by=['CAT_AVG'], ascending=False, inplace=True)
    return res[:num_players]


def graph_cats(data):
    cols = ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FG%', 'FT%', 'TOV']
    sixty_percentile = [15.2, 5.5, 3.2, 1.0, 0.6, 1.64, 0.4724, 0.8038, 1.8]
    for col, line_pos in zip(cols, sixty_percentile):
        # col_zscore = col + '_zscore'

        fig = px.scatter(data, x='Name', y=col, title=col)
        fig.add_shape(type="line",
                      x0=0, y0=line_pos, x1=len(data), y1=line_pos,
                      line=dict(color="RoyalBlue", width=3)
                      )
        fig.show()


def graph_cats(data):
    cols = ['PTS', 'REB', 'AST', 'STL', 'BLK', '3PM', 'FG%', 'FT%', 'TOV']
    sixty_percentile = [15.2, 5.5, 3.2, 1.0, 0.6, 1.64, 0.4724, 0.8038, 1.8]
    for col, line_pos in zip(cols, sixty_percentile):
        col_zscore = col + '_zscore'
        fig = px.scatter(data, x='Name', y=col, title=col)
        fig.show()


trent = Team(owner='MC', df=stats_projected, players=['Fred VanVleet', 'RJ Barrett'])
zad = Team(owner='Zeus', df=stats_projected, players=['Bam Adebayo', 'Jamal Murray'])
kevin = Team(owner='Kevin', df=stats_projected, players=['Kevin Durant', 'Shai Gilgeous-Alexander'])
andrew = Team(owner='Andrew', df=stats_projected, players=['Ja Morant', 'Christian Wood'])
taiwan = Team(owner='Taiwan', df=stats_projected, players=['Brandon Ingram', 'Andrew Wiggins'])
joseph = Team(owner='Joseph', df=stats_projected, players=['Lonzo Ball'])
chaddy = Team(owner='Chaddy', df=stats_projected, players=['Jayson Tatum', 'Jusuf Nurkic'])
justin = Team(owner='Justin', df=stats_projected, players=['Zion Williamson', 'Dennis Shroder'])
calvin = Team(owner='Calvin', df=stats_projected, players=['Luka Docic', 'Goran Dragic'])
smokey = Team(owner='Smokey', df=stats_projected, players=['Jalyen Brown', 'Will Barton'])
young = Team(owner='Young', df=stats_projected, players=['John Wall', 'Devonte\' Graham'])
josh = Team(owner='Josh', df=stats_projected, players=['Kelly Oubre Jr.', 'Victor Oladipo'])

teams = [trent, zad, kevin, andrew, taiwan, joseph, chaddy, justin, calvin, smokey, young, josh]


def show_table(stats):
    stats.describe()


#x='PTS', y='AST', z='3PM'
def show_3D_scatter(stats, col1, col2, col3):
    fig = px.scatter_3d(stats[(stats.MPG > 30) & (stats.Gs > 30) & (stats.Taken == False)],
                        x=col1,
                        y=col2, z=col3, color='Name')
    fig.show()


def driver():
    add_zscores(stats_19_20)
    testData = stats_19_20.copy()

    show_table(stats_19_20)
    # stats_19_20.describe()

    show_3D_scatter(stats_19_20, "PTS", "AST", "3PM")

    fig = px.scatter(stats_19_20[(stats_19_20.MPG > 20) & (stats_19_20.Gs > 20)], x='Name', y='SUM_zscore')
    fig.show()

    top_players_cat(stats_19_20, categories=['PTS', 'AST', '3PM'], num_players=20)

    # Example: Show Avg stats for all teams.
    team1 = Team('trent', df=testData, players=['James Harden', 'Kawhi Leonard'])
    team2 = Team('thomas', df=testData, players=['Karl-Anthony Towns', 'Damian Lillard'])
    testTeams = [team1, team2]
    calc_projected_score_all(stats_19_20, testTeams)

    Example: Show stats for a team.

    team1.calculate_projected_score(stats_19_20)

    team1.show_roster()

    stats_projected.describe()

    stats_projected.quantile(0.6)

    add_zscores(stats_projected)

    df = calc_projected_score_all(stats_19_20, teams)


    trent.add_player('DeAndre\' Bembry')

    trent.show_roster()
    zad.show_roster()

driver()